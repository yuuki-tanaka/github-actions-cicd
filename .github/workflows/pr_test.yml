# This is a basic workflow to help you get started with Actions

name: CodeClimate_PR_Comment

on:
  pull_request:

jobs:
  PR_Comment:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
      
      - run: echo BASE=`git rev-parse HEAD` >> $GITHUB_ENV
          
      - uses: actions/checkout@v3
      
      - name: diff info get
        run: |
          touch diffLine.sh
          cat <<EOF > diffLine.sh
            #!/bin/sh
            # diff-lines.sh
            numbers
            path=
            line=
            while read; do
              esc=$'\033'
              if [[ "$REPLY" =~ ---\ (a/)?.* ]]; then
                continue
              elif [[ "$REPLY" =~ \+\+\+\ (b/)?([^[:blank:]]+).* ]]; then
                path=${BASH_REMATCH[2]}
              elif [[ "$REPLY" =~ @@\ -[0-9]+(,[0-9]+)?\ \+([0-9]+)(,[0-9]+)?\ @@.* ]]; then
                line=${BASH_REMATCH[2]}
              elif [[ "$REPLY" =~ ^($esc\[[0-9;]+m)*([\ +-]) ]]; then
                echo "$path:$line:$REPLY"
                if [[ "${BASH_REMATCH[2]}" != - ]]; then
                  ((line++))
                fi
              fi
            done
          EOF
          git --no-pager diff $BASE --irreversible-delete --no-ext-diff -U1000000 | sh ./diffLine.sh | grep -E "^[^\"].*\:[0-9]+\:[\+|\-]" | | ruby -nle 'print $_.split(":").slice(0..1).join(" ")' | uniq
      
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const state_urls = context.payload.pull_request.statuses_url.split('/')
            const commit_id = state_urls[state_urls.length -1]
            const owner = context.payload.repository.full_name.split('/')[0]
            const repo = context.payload.repository.full_name.split('/')[1]
            const pull_number = context.payload.pull_request.number
            
            let pull_info = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', {
              owner: owner,
              repo: repo,
              pull_number: pull_number
            })
            
            let file = pull_info.data[0].filename
            
            await github.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments', {
              owner: owner,
              repo: repo,
              pull_number: pull_number,
              body: 'Great stuff!',
              commit_id: commit_id,
              path: file,
              start_line: 10,
              start_side: 'RIGHT',
              line: 11,
              side: 'RIGHT'
            })
            console.log(pull_info)
          

